-- Testing number of queries for views:

	If you want to test how many queries are executed for each
	view... If you are using a class based view. You can override
	the get_queryset method and (use super() if you want to 
	still return the same queryset) do the following:

	At the top of the code block:

		from django.db import connection

	At the end of the code block:

		print(len(connection.queries)) --> num queries exc.

	If using function based views... Do the same things in the
	function itself.

	-- EASIER: Use the `log_queries` decorator in `utilities.py` that I made. Just saved you some time, eh? >:D

-- Using the responses folder:

	If you want to create a form based view that will potentially
	be used for both ajax and non-ajax requests. Whether they
	be get or post. You may subclass from responses.FormResponseView instead of django.views.generic.FormView.

	This saves you from having to create two seperate views, two
	seperate classes etc. Everything will be handled dynamically,
	provided that you don't screw up overriding the abstractmethods.....

	If you want ajax views etc or just some base response, I think
	everything else is fairly self explanatory.

-- Including css files on a template basis:

	Example is in archive/timeline/main.html

	If using {% extends * %} on some extends that has a base
	extend of 'base.html' then you may use 

		{% block extra_head %}
		
		Optionally use {{block.super}} if you wish to include
		all the current css files in the block hierarchy

		Or...

			<link ref="stylesheet" href="{% static 'path' %}"> 
			......

		{% endblock %}

-- Minifying javascript files:

	Django has a nifty utility already built-in for this

		(provided you have closure....)

	You can view the relevant documentation here:

		https://docs.djangoproject.com/en/dev/internals/contributing/writing-code/javascript/


-- GOTCHAS:

	-- If you use `.prefetch_related(*)` on some queryset and then
	you filter the queryset. This is an ENTIRELY NEW QUERYSET.

	Your prefetch_related was redundant and you just destroyed
	any performance benefits you (may) have had.

	--


	--


	--


	--